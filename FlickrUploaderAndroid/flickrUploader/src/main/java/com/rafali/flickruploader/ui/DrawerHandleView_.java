//
// DO NOT EDIT THIS FILE, IT HAS BEEN GENERATED USING AndroidAnnotations 3.0.1.
//


package com.rafali.flickruploader.ui;

import android.content.Context;
import android.os.Handler;
import android.os.Looper;
import android.util.AttributeSet;
import android.view.View;
import android.widget.TextView;
import com.rafali.flickruploader.model.Media;
import com.rafali.flickruploader.ui.widget.CustomImageView;
import com.rafali.flickruploader2.R.id;
import com.rafali.flickruploader2.R.layout;
import org.androidannotations.api.view.HasViews;
import org.androidannotations.api.view.OnViewChangedListener;
import org.androidannotations.api.view.OnViewChangedNotifier;


/**
 * We use @SuppressWarning here because our java code
 * generator doesn't know that there is no need
 * to import OnXXXListeners from View as we already
 * are in a View.
 * 
 */
@SuppressWarnings("unused")
public final class DrawerHandleView_
    extends DrawerHandleView
    implements HasViews, OnViewChangedListener
{

    private boolean alreadyInflated_ = false;
    private final OnViewChangedNotifier onViewChangedNotifier_ = new OnViewChangedNotifier();
    private Handler handler_ = new Handler(Looper.getMainLooper());

    public DrawerHandleView_(Context context, AttributeSet attrs) {
        super(context, attrs);
        init_();
    }

    public static DrawerHandleView build(Context context, AttributeSet attrs) {
        DrawerHandleView_ instance = new DrawerHandleView_(context, attrs);
        instance.onFinishInflate();
        return instance;
    }

    /**
     * The mAlreadyInflated_ hack is needed because of an Android bug
     * which leads to infinite calls of onFinishInflate()
     * when inflating a layout with a parent and using
     * the <merge /> tag.
     * 
     */
    @Override
    public void onFinishInflate() {
        if (!alreadyInflated_) {
            alreadyInflated_ = true;
            inflate(getContext(), layout.drawer_handle_view, this);
            onViewChangedNotifier_.notifyViewChanged(this);
        }
        super.onFinishInflate();
    }

    private void init_() {
        OnViewChangedNotifier previousNotifier = OnViewChangedNotifier.replaceNotifier(onViewChangedNotifier_);
        OnViewChangedNotifier.registerOnViewChangedListener(this);
        OnViewChangedNotifier.replaceNotifier(previousNotifier);
    }

    @Override
    public void onViewChanged(HasViews hasViews) {
        subTitle = ((TextView) hasViews.findViewById(id.sub_title));
        title = ((TextView) hasViews.findViewById(id.title));
        imageView = ((CustomImageView) hasViews.findViewById(id.image));
        message = ((TextView) hasViews.findViewById(id.message));
        progressContainer = ((View) hasViews.findViewById(id.progressContainer));
        afterViews();
    }

    @Override
    public void onProcessed(final Media media) {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                DrawerHandleView_.super.onProcessed(media);
            }

        }
        );
    }

    @Override
    public void render() {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                DrawerHandleView_.super.render();
            }

        }
        );
    }

    @Override
    public void setMessage(final String text, final int duration) {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                DrawerHandleView_.super.setMessage(text, duration);
            }

        }
        );
    }

    @Override
    public void onFinished(final int nbUploaded, final int nbError) {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                DrawerHandleView_.super.onFinished(nbUploaded, nbError);
            }

        }
        );
    }

}
